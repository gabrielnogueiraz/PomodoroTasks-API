#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

console.log('üîç DIAGN√ìSTICO RAILWAY - Waiting for build to start...');
console.log('====================================================\n');

const issues = [];
const warnings = [];

// 1. Verificar arquivos essenciais
console.log('üìÅ Verificando arquivos essenciais...');

const essentialFiles = [
  'package.json',
  'railway.json', 
  '.nvmrc',
  'Procfile',
  'src/server.ts'
];

essentialFiles.forEach(file => {
  if (fs.existsSync(file)) {
    console.log(`‚úÖ ${file} - OK`);
  } else {
    console.log(`‚ùå ${file} - MISSING`);
    issues.push(`Arquivo ausente: ${file}`);
  }
});

// 2. Verificar package.json
console.log('\nüì¶ Verificando package.json...');
try {
  const pkg = JSON.parse(fs.readFileSync('package.json', 'utf8'));
  
  if (pkg.scripts && pkg.scripts.start) {
    console.log(`‚úÖ Script start: ${pkg.scripts.start}`);
  } else {
    console.log('‚ùå Script start n√£o encontrado');
    issues.push('Script "start" ausente no package.json');
  }
  
  if (pkg.scripts && pkg.scripts.build) {
    console.log(`‚úÖ Script build: ${pkg.scripts.build}`);
  } else {
    console.log('‚ùå Script build n√£o encontrado');
    issues.push('Script "build" ausente no package.json');
  }
  
  if (pkg.engines && pkg.engines.node) {
    console.log(`‚úÖ Node engine: ${pkg.engines.node}`);
  } else {
    console.log('‚ö†Ô∏è  Node engine n√£o especificado');
    warnings.push('Especifique engines.node no package.json');
  }
  
} catch (error) {
  console.log('‚ùå Erro ao ler package.json');
  issues.push('package.json inv√°lido ou ileg√≠vel');
}

// 3. Verificar .nvmrc
console.log('\nüè∑Ô∏è  Verificando .nvmrc...');
if (fs.existsSync('.nvmrc')) {
  const nvmrc = fs.readFileSync('.nvmrc', 'utf8').trim();
  console.log(`‚úÖ Node version: ${nvmrc}`);
  
  if (!nvmrc.match(/^\d+\.\d+\.\d+$/)) {
    console.log('‚ùå Formato inv√°lido de vers√£o no .nvmrc');
    issues.push('Formato inv√°lido no .nvmrc (use formato: 18.19.0)');
  }
}

// 4. Verificar railway.json
console.log('\nüöÇ Verificando railway.json...');
try {
  const railway = JSON.parse(fs.readFileSync('railway.json', 'utf8'));
  
  if (railway.deploy && railway.deploy.startCommand) {
    console.log(`‚úÖ Start command: ${railway.deploy.startCommand}`);
  } else {
    console.log('‚ö†Ô∏è  Start command n√£o especificado');
    warnings.push('Especifique startCommand no railway.json');
  }
  
  if (railway.build) {
    console.log(`‚úÖ Builder: ${railway.build.builder || 'default'}`);
  }
  
} catch (error) {
  console.log('‚ùå Erro ao ler railway.json');
  issues.push('railway.json inv√°lido ou ileg√≠vel');
}

// 5. Verificar dist/ ap√≥s build
console.log('\nüèóÔ∏è  Verificando build...');
if (fs.existsSync('dist')) {
  console.log('‚úÖ Pasta dist/ existe');
  if (fs.existsSync('dist/server.js')) {
    console.log('‚úÖ dist/server.js existe');
  } else {
    console.log('‚ùå dist/server.js n√£o encontrado');
    issues.push('Build n√£o gerou dist/server.js');
  }
} else {
  console.log('‚ö†Ô∏è  Pasta dist/ n√£o existe (execute npm run build)');
  warnings.push('Execute npm run build para gerar dist/');
}

// 6. Verificar tamanho do reposit√≥rio
console.log('\nüìä Verificando tamanho do projeto...');
try {
  const stats = fs.statSync('.');
  console.log('‚úÖ Projeto acess√≠vel');
  
  if (fs.existsSync('node_modules')) {
    console.log('‚ö†Ô∏è  node_modules presente (deve estar no .gitignore)');
    warnings.push('node_modules n√£o deve ser commitado');
  }
  
} catch (error) {
  console.log('‚ùå Erro ao acessar projeto');
  issues.push('Problemas de acesso ao diret√≥rio do projeto');
}

// 7. Verificar .gitignore
console.log('\nüö´ Verificando .gitignore...');
if (fs.existsSync('.gitignore')) {
  const gitignore = fs.readFileSync('.gitignore', 'utf8');
  const shouldIgnore = ['node_modules', 'dist', '.env', '*.log'];
  
  shouldIgnore.forEach(item => {
    if (gitignore.includes(item)) {
      console.log(`‚úÖ Ignoring: ${item}`);
    } else {
      console.log(`‚ö†Ô∏è  Not ignoring: ${item}`);
      warnings.push(`Adicione "${item}" ao .gitignore`);
    }
  });
}

// Relat√≥rio final
console.log('\n' + '='.repeat(50));
console.log('üìã RELAT√ìRIO FINAL');
console.log('='.repeat(50));

if (issues.length === 0) {
  console.log('‚úÖ Nenhum problema cr√≠tico encontrado!');
} else {
  console.log(`‚ùå ${issues.length} problema(s) cr√≠tico(s) encontrado(s):`);
  issues.forEach((issue, i) => {
    console.log(`   ${i + 1}. ${issue}`);
  });
}

if (warnings.length > 0) {
  console.log(`\n‚ö†Ô∏è  ${warnings.length} aviso(s):`);
  warnings.forEach((warning, i) => {
    console.log(`   ${i + 1}. ${warning}`);
  });
}

console.log('\nüîß SOLU√á√ïES SUGERIDAS:');
console.log('1. Force um commit vazio: git commit --allow-empty -m "force rebuild"');
console.log('2. Verifique se PostgreSQL foi adicionado ao projeto Railway');
console.log('3. Limpe cache do Railway: Settings ‚Üí Danger ‚Üí Clear Build Cache');
console.log('4. Delete e recrie o servi√ßo se necess√°rio');

if (issues.length > 0) {
  console.log('\n‚ùå Corrija os problemas cr√≠ticos antes de tentar deploy novamente');
  process.exit(1);
} else {
  console.log('\n‚úÖ Projeto parece estar configurado corretamente para Railway');
  process.exit(0);
}
