#!/usr/bin/env node

console.log('üîç RAILWAY QUICK DIAGNOSIS - "Waiting for build to start"');
console.log('================================================\n');

// Verificar se est√° tudo nos lugares corretos
const fs = require('fs');

console.log('‚úÖ VERIFICA√á√ïES CR√çTICAS:');

// 1. railway.json
if (fs.existsSync('railway.json')) {
  const railway = JSON.parse(fs.readFileSync('railway.json', 'utf8'));
  if (railway.build && railway.deploy) {
    console.log('‚úÖ railway.json: Configurado corretamente');
  } else {
    console.log('‚ùå railway.json: Configura√ß√£o incompleta');
  }
} else {
  console.log('‚ùå railway.json: N√£o encontrado');
}

// 2. package.json scripts
const pkg = JSON.parse(fs.readFileSync('package.json', 'utf8'));
if (pkg.scripts.start && pkg.scripts.build) {
  console.log('‚úÖ package.json: Scripts start e build OK');
} else {
  console.log('‚ùå package.json: Scripts ausentes');
}

// 3. Dist directory
if (fs.existsSync('dist/server.js')) {
  console.log('‚úÖ Build: dist/server.js existe');
} else {
  console.log('‚ö†Ô∏è  Build: Execute npm run build localmente');
}

console.log('\nüöÄ A√á√ïES PARA RAILWAY:');
console.log('1. Aguarde 2-3 minutos ap√≥s o commit');
console.log('2. Se n√£o funcionar, v√° ao Railway:');
console.log('   - Settings ‚Üí Danger ‚Üí Clear Build Cache');
console.log('   - Force um redeploy manual');
console.log('3. √öltima op√ß√£o: Delete e recrie o servi√ßo');

console.log('\nüìä CONFIGURA√á√ÉO ATUAL:');
console.log(`- Node.js: ${pkg.engines?.node || 'n√£o especificado'}`);
console.log(`- Start: ${pkg.scripts.start}`);
console.log(`- Build: ${pkg.scripts.build}`);

console.log('\n‚è±Ô∏è  Aguarde alguns minutos e verifique o Railway Dashboard...');
